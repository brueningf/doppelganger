---
import { random, shuffle, chunk, take } from 'lodash'

// fetch images from server
const images = Array.from(Array(21), (x, i) => `${i+ 1}.png`)
const scenario = "animal-crossing";
const shuffledImages = shuffle(images)
const keyImage = shuffledImages.pop()
let chunks = chunk(shuffledImages, 7)
chunks = take(chunks, 2)

for(let chunk of chunks) {
    chunk.push(keyImage)
    chunk = shuffle(chunk)
}

// pick one random image to be the common image in two sets
// pick random 14 images into two arrays
// 


// fetch current scenario

// // build image array
// const images = Array(8)
//     .fill(0)
//     .map((val, i) => {
//         return {
//             filename: `${i + 1}.png`,
//             rotation: random(1, 360) + "deg",
//             scale: (Math.random() * 1).toFixed(2),
//         };
//     });


---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Doppelganger</title>
    </head>
    <body class="h-[100vh] bg-stone-300 flex items-center">
        <ul
            class="elements flex flex-wrap mx-auto w-[400px] h-[400px] border bg-slate-200 shadow-lg"
        >
            {
                images.map((v, i) => {
                    return (
                        <li class="w-1/3 flex items-center justify-around"
                        >
                            <img
                                src={`images/${scenario}/${v.filename}`}
                                class={`w-12 rotate-[${v.rotation}]`}
                            />
                        </li>
                    );
                })
            }
        </ul>
    </body>
</html>
<style lang="scss">
    .elements {
        --_w: 400px;
        aspect-ratio: 1;
        border-radius: 50%;
        list-style-type: none;
        inline-size: var(--_w);
        padding: unset;
        position: relative;
    }
    .elements li {

    }

    @supports not (left: calc(1px * cos(45deg))) {
        // support note
        p {
            display: block;
        }
    }
</style>
